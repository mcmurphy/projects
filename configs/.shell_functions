#!/bin/bash
# sourced by .bashrc

# uncompress depending on extension...
extract() {    
  if [ -f "$1" ] ; then
    case "$1" in
      *.tar.bz2) tar xvjf "$1"   ;;
      *.tar.gz)  tar xvzf "$1"   ;;
      *.bz2)     bunzip2 "$1"    ;;
      *.rar)     unrar x "$1"    ;;
      *.gz)      gunzip "$1"     ;;
      *.tar)     tar xvf "$1"    ;;
      *.tbz2)    tar xvjf "$1"   ;;
      *.tgz)     tar xvzf "$1"   ;;
      *.zip)     unzip "$1"      ;;
      *.Z)       uncompress "$1" ;;
      *.7z)      7z x "$1"       ;;
      *)
      echo "'$1' cannot be extracted"
      return 1
      ;;
    esac
  else
    echo "'$1' is not a valid file"
    return 1
  fi
  return 0
}

# Usage: smartcompress <file> (<type>)
# Description: compresses files or a directory.  Defaults to tar.gz
smartcompress() {
    if [ '$2' ]; then
    case '$2' in
        tgz | tar.gz)   tar -zcvf$1.$2 '$1' ;;
        tbz2 | tar.bz2) tar -jcvf$1.$2 '$1' ;;
        tar.Z)          tar -Zcvf$1.$2 '$1' ;;
        tar)            tar -cvf$1.$2  '$1' ;;
        gz | gzip)      gzip           '$1' ;;
        bz2 | bzip2)    bzip2          '$1' ;;
        *) echo "Error: $2 is not a valid compression type" ;;
    esac
else
smartcompress '$1' tar.gz
fi
}

# Usage: show-archive <archive>
# Description: view archive without unpack
show-archive() {
    if [[ -f $1 ]]
    then
    case $1 in
        *.tar.gz)   gunzip -c $1 | tar -tf - -- ;;
        *.tar)      tar -tf $1 ;;
        *.tgz)      tar -ztf $1 ;;
        *.zip)      unzip -l $1 ;;
        *.bz2)      bzless $1 ;;
        *) echo "'$1' Error. Please go away" ;;
    esac
else
echo "'$1' is not a valid archive"
fi
}

# add by artist to mpc
addartist() {
  mpc clear
  mpc search artist "$@" | mpc add
  [ $? -eq 0 ] && mpc play
}

# make a thumb %20 the size of a pic
thumbit() {
  if [ -z $1 ]; then
    echo "please supply a file to shrink"
    return 1 
  fi

  case $1 in
    *.jpg)
      thumb=$(echo "$1" | sed s/.jpg/-thumb.jpg/g)
      cp $1 $thumb
      mogrify -resize 20% $thumb
    ;;
    *.jpeg)
      thumb=$(echo "$1" | sed s/.jpeg/-thumb.jpeg/g)
      cp $1 $thumb
      mogrify -resize 20% $thumb
    ;;
    *.png)
      thumb=$(echo "$1" | sed s/.png/-thumb.png/g)
      cp $1 $thumb
      mogrify -resize 20% $thumb
    ;;
    *)
      echo "Image must be .jpg, .jpeg, or .png"
      return 1
    ;;
  esac
}

# go to google for a definition
define() {
  local LNG=$(echo $LANG | cut -d '_' -f 1)
  local CHARSET=$(echo $LANG | cut -d '.' -f 2)
  lynx -accept_all_cookies -dump -hiddenlinks=ignore -nonumbers -assume_charset="$CHARSET" -display_charset="$CHARSET" "http://www.google.com/search?hl=${LNG}&q=define%3A+${1}&btnG=Google+Search" | grep -m 5 -C 2 -A 5 -w "*" > /tmp/define
  if [ ! -s /tmp/define ]; then
    echo "Sorry, google doesn't know this one..."
    rm -f /tmp/define
    return 1
  else
    cat /tmp/define | grep -v Search
    echo ""
  fi
  rm -f /tmp/define
  return 0
}

# grep by paragraph
grepp() {
  [ $# -ne 2 ] && return 1
  perl -00ne "print if /$1/i" < $2
}

# pull a single file out of a .tar.gz
pullout() {
  if [ $# -ne 2 ]; then
    echo "need proper arguments:"
    echo "pullout [file] [archive.tar.gz]"
    return 1
  fi
  case $2 in
    *.tar.gz|*.tgz)
    gunzip < $2 | tar -xf - $1
    ;;
    *)
    echo $2 is not a valid archive
    return 1
    ;;
  esac
  return 0
}

# recursively fix dir/file permissions on a given directory
fix() {
  if [ -d "$1" ]; then 
    find "$1" -type d -exec chmod 755 {} -type f -exec chmod 644 {} \;
  else
    echo "$1 is not a directory."
  fi
}

# manage services
service() {
  if [ $# -lt 2 ]; then
    echo "Missing service name or command"
    return 1
  fi
  sudo /etc/rc.d/$1 $2 && return 0
}

# open a GUI app from CLI
open() {
  $1 >/dev/null 2>&1 &
}

# choose a random wallpaper
randomwp() {
  local PIC=$(ls $HOME/Pictures/backgrounds | sort -R | head -1)
  feh --bg-scale $HOME/Pictures/backgrounds/$PIC
}

# take a timestamped screenshot
shot(){
    local PIC="$HOME/files/pictures/desktop_$(date +%y%m%d%H%M).png"
  scrot -t 20 -cd 3 $PIC
}

# auto send an attachment from CLI
send() {
  echo "File auto-sent from linux." | mutt -s "See Attached File" -a $1 $2
}

# rip a file with handbrake and good options
#rip() {
#  handbrake -i /dev/dvd -o /home/rusty/$1.avi -L -U -F -f avi -e xvid -b 2000 -B 160
#}

#rip() {
#    handbrake -i /dev/dvd -o /home/rusty/$1.avi -L -U -F -f avi -e x264 -b 1500
#}

rip() {
    handbrake -i /dev/dvd -o /home/rusty/$1.avi -L -U -F -f mp4 -e x264 -E vorbis -B 112 -2 -T -S 1000
}

# abcde cd rip using ogg encoding format
cdrip() {
    abcde -p -o vorbis:"-b 320"
}

pbdown() {
    pbget --dir=abs/custom --aur-only $1
}

get_hd() {
    get_iplayer --type=tv --get $1 --modes='flashhd' --flvstreamer='/usr/bin/flvstreamer' --ffmpeg='/usr/bin/ffmpeg'
}

get_vhigh() {
    get_iplayer --type=tv --get $1 --modes='flashvhigh' --flvstreamer='/usr/bin/flvstreamer' --ffmpeg='/usr/bin/ffmpeg'
}

get_high() {
    get_iplayer --type=tv --get $1 --modes='flashhigh' --flvstreamer='/usr/bin/flvstreamer' --ffmpeg='/usr/bin/ffmpeg'
}

get_norm() {
    get_iplayer --type=tv --get $1 --modes='iphone' --flvstreamer='/usr/bin/flvstreamer' --ffmpeg='/usr/bin/ffmpeg'
}

# simple calculator
calc() {
  echo "scale=3; $@" | bc
}

# make a backup before editing a file
safeedit() {
  cp $1 $1.backup && vim $1
}

# save a file to ~/Temp
saveit() {
  cp $1 $HOME/Temp/$1.saved
}

# switch two files (comes in handy)
switchfile() {
  mv $1 $1.tmp && mv $2 $1 && mv $1.tmp $2
}

